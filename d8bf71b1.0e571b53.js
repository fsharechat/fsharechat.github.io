(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{161:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return r})),a.d(t,"default",(function(){return o}));var n=a(2),l=a(6),b=(a(0),a(189)),i={title:"CAST keyword",sidebar_label:"CAST",description:"CAST SQL keyword reference documentation."},c={unversionedId:"reference/sql/cast",id:"reference/sql/cast",isDocsHomePage:!1,title:"CAST keyword",description:"CAST SQL keyword reference documentation.",source:"@site/docs/reference/sql/cast.md",slug:"/reference/sql/cast",permalink:"/docs/reference/sql/cast",version:"current",sidebar_label:"CAST"},r=[{value:"Explicit conversion",id:"explicit-conversion",children:[{value:"Syntax",id:"syntax",children:[]},{value:"Examples",id:"examples",children:[]},{value:"Precision loss examples",id:"precision-loss-examples",children:[]}]},{value:"Implicit conversion",id:"implicit-conversion",children:[]}],s={rightToc:r};function o(e){var t=e.components,i=Object(l.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},s,i,{components:t,mdxType:"MDXLayout"}),Object(b.b)("p",null,"Type conversion. Can be either:"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#explicit-conversion"}),"Explicit")," via ",Object(b.b)("inlineCode",{parentName:"li"},"cast()")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"#implicit-conversion"}),"Implicit"),", in which case it will be automatically\nperformed when required by the context.")),Object(b.b)("h2",{id:"explicit-conversion"},"Explicit conversion"),Object(b.b)("p",null,"Types can be converted from one to another using the ",Object(b.b)("inlineCode",{parentName:"p"},"cast()")," function."),Object(b.b)("h3",{id:"syntax"},"Syntax"),Object(b.b)("p",null,Object(b.b)("img",{alt:"Flow chart showing the syntax of the CAST keyword",src:a(233).default})),Object(b.b)("p",null,"where:"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"expression")," can be a constant, a column, or an expression that evaluates to a\nvalue."),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"type")," refers to the desired ",Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/reference/sql/datatypes/"}),"data type"),".")),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"cast")," can be used a part of arithmetic expression as normal"),Object(b.b)("h3",{id:"examples"},"Examples"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-questdb-sql",metastring:'title="Queries"',title:'"Queries"'}),"SELECT\ncast(3L + 2L AS INT),\ncast(1578506142000000 AS TIMESTAMP),\ncast('10.2' AS DOUBLE),\ncast('\u884c' AS INT);\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"cast"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"cast1"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"cast2"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"cast3"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"5"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2020-01-08T17:55:42.000000Z"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10.2"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"34892")))),Object(b.b)("p",null,"Explicit casting of an expression to a smaller\n",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/reference/sql/datatypes/"}),"data type")," may result in loss of data when the\noutput data type is smaller than the expression."),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"Casting a decimal number type (",Object(b.b)("inlineCode",{parentName:"li"},"float")," or ",Object(b.b)("inlineCode",{parentName:"li"},"double"),") to an integer number type\n(",Object(b.b)("inlineCode",{parentName:"li"},"long"),", ",Object(b.b)("inlineCode",{parentName:"li"},"int"),", ",Object(b.b)("inlineCode",{parentName:"li"},"short"),") will result in decimals drop."),Object(b.b)("li",{parentName:"ul"},"If the integer part being cast is larger than the resulting data type, it will\nbe resized by truncating bits."),Object(b.b)("li",{parentName:"ul"},"Conversions from ",Object(b.b)("inlineCode",{parentName:"li"},"char")," to a number type will return the corresponding\n",Object(b.b)("inlineCode",{parentName:"li"},"unicode")," number and vice versa.")),Object(b.b)("h3",{id:"precision-loss-examples"},"Precision loss examples"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-questdb-sql",metastring:'title="Queries"',title:'"Queries"'}),"SELECT\ncast(3.5 + 2 AS INT),\ncast(7234623 AS SHORT),\ncast(2334444.323 AS SHORT);\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"cast"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"cast1"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"cast2"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"5"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"25663"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-24852")))),Object(b.b)("p",null,"When casting numbers into a smaller data type, QuestDB will truncate the higher\nbits of this number."),Object(b.b)("h2",{id:"implicit-conversion"},"Implicit conversion"),Object(b.b)("p",null,"Type casting may be necessary in certain context such as"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"Operations involving various different types"),Object(b.b)("li",{parentName:"ul"},"Inserting values where the originating type is different from the destination\ncolumn type.")),Object(b.b)("p",null,"QuestDB will attempt to convert to the data type required by the context. This\nis called ",Object(b.b)("inlineCode",{parentName:"p"},"implicit cast")," and does not require using the ",Object(b.b)("inlineCode",{parentName:"p"},"cast()")," function."),Object(b.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(b.b)("h5",{parentName:"div"},Object(b.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(b.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(b.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(b.b)("p",{parentName:"div"},"QuestDB will only perform implicit cast when they would not result in data being\ntruncated or precision being lost."))),Object(b.b)("p",null,"The below chart illustrates the explicit and implicit cast available in QuestDB."),Object(b.b)("p",null,Object(b.b)("img",{alt:"Table showing the different possibilities the cast function supports, those are defined by an input and output types",src:a(297).default})),Object(b.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(b.b)("h5",{parentName:"div"},Object(b.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(b.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(b.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(b.b)("p",{parentName:"div"},"Implicit casting prevents data loss. When an operation involves multiple types,\nthe resulting type will be the smallest possible type so that no data is lost."))),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-questdb-sql",metastring:'title="Queries"',title:'"Queries"'}),"SELECT\n1234L + 567,\n1234L + 0.567,\nto_timestamp('2019-10-17T00:00:00', 'yyyy-MM-ddTHH:mm:ss') + 323,\nto_timestamp('2019-10-17T00:00:00', 'yyyy-MM-ddTHH:mm:ss') + 0.323;\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"cast"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"cast1"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"cast2"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"cast3"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1801"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1234.567"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2019-10-17T00:00:00.000323Z"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1571270400000000")))),Object(b.b)("p",null,"When inserting into a table, QuestDB will cast data implicitly to match the type\nof the destination column."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-questdb-sql",metastring:'title="Example"',title:'"Example"'}),"-- We create a table with one column of type long\nCREATE TABLE my_table(my_number long);\n\n-- We then insert a value into this table. Note that the value is of timestamp type\n-- but that we are trying to insert into a long type column:\nINSERT INTO my_table values((to_timestamp('2019-10-17T00:00:00', 'yyyy-MM-ddTHH:mm:ss'));\n\n-- As timestamp can be converted to long without loss, QuestDB performs an implicit\n-- cast on the value before inserting it. Therefore the value is now stored as a long:\nSELECT * FROM my_table;\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"my_number"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1571270400000000")))),Object(b.b)("p",null,"The above insert would have been equivalent to running with explicit cast, but\nQuestDB took care of this step automatically."),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-questdb-sql",metastring:'title="Example"',title:'"Example"'}),"INSERT INTO my_table values\n            (cast(\n                to_timestamp('2019-10-17T00:00:00', 'yyyy-MM-ddTHH:mm:ss')\n                AS LONG\n            ));\n")),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"my_number"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1571270400000000")))))}o.isMDXComponent=!0},297:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/castmap-a387eddb6879d751c8e7b014c3aff51b.jpg"}}]);